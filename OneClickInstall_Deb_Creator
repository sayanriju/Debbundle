#!/bin/bash

# Copyright (c) 2011 Narendra Sisodiya http://narendrasisodiya.com
# Email - narendra@narendrasisodiya.com
# Released under GPLv3
# http://code.google.com/p/debbundle

#	This file is par of debbundle - http://code.google.com/p/debbundle
#	debbundle is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	debbundle is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with debbundle.  If not, see <http://www.gnu.org/licenses/>.

########### Function Definitions #############
TMPDIR="/tmp"

function get_deps()
{
	local HOLD=0
	apt-cache -i depends $@ |
	while read line;do
		echo "$line" | egrep -q '(Depends:)'
		if [ $? -eq 0 ];then
			echo "$line" | egrep -q '<*>'
			if [ $? -eq 0 ];then
				HOLD=1
				continue
			else
				echo "$line" | cut -d' ' -f2
				HOLD=0
				continue
			fi
		elif [ $HOLD -eq 1 ];then
			echo "$line" | egrep -q '<*>'
			if [ $? -ne 0  ];then
				echo "$line" | egrep -q ':'
				if [ $? -ne 0 ];then
					echo "$line" 
					HOLD=0
				fi
			fi
		else
			continue
		fi
	done
}

function build_dep_tree()
{
    echo "$@" | tr ' ' "\n" |tee "$TMPDIR/tmptree" > "$TMPDIR/tree"
    local pkgs;

    while [ 1 ];do
        pkgs=`get_deps $(cat "$TMPDIR/tmptree")`;
        >"$TMPDIR/tmptree"
        for pkg in $pkgs;do
            grep -q $pkg "$TMPDIR/tree"
            if [ $? -ne 0 ];then
                echo "$pkg" >> "$TMPDIR/tmptree"
            fi
        done
        if [[ ! -s "$TMPDIR/tmptree" ]];then
            break;
        else
            cat "$TMPDIR/tmptree" >> "$TMPDIR/tree"
        fi
    done

    rm -f "$TMPDIR/tmptree"
    # cat "$TMPDIR/tree" | sort -u
    # >"$TMPDIR/tree"
}
############ End Function Definitions ################

echo "  =======   Welcome to OneClickInstall Deb Creator	  ========"

FULLFILENAME=$1

if [ -z "$FULLFILENAME" ]
then

cat << EOF
usage: $0 OutPutFile package-list
Ex - $0 vim vim-gtk

EOF
  exit 1;
fi


RES=`which makeself > /dev/null;echo $?`

if [ $RES = 1 ]
then
	echo "Makeself command was not installed, Please install makeself command"
	echo "Run following to install makeself"
	echo "sudo apt-get install makeself"
	exit 0
fi

shift
echo "Building Dependency Tree. This may take some time ....................."
echo "......."
echo "............."
echo "....................."
build_dep_tree "$@"
ALLPACKAGES=`cat "$TMPDIR/tree" | sort -u`

echo "Creating a One Click Installer to install $FULLFILENAME ....................."
echo "......."
echo "............."
echo "....................."
## moving old archives to new directory  

LocalDir=./$FULLFILENAME

mkdir -p $LocalDir
mkdir -p $LocalDir/partial

sudo apt-get -y -o dir::cache::archives="$LocalDir"  install --download-only $ALLPACKAGES
sudo rm $LocalDir/lock
touch $LocalDir/install.sh
chmod +x $LocalDir/install.sh

### Fixing QuickFix 
### Computer which do have have internet cannot run 'apt-get update' and hence apt-get install
###

cat << EOF > $LocalDir/install.sh
#!/bin/bash
#sudo apt-get -o dir::cache::archives=\$PWD install $ALLPACKAGES
echo "Installation started... We are going to install following packages..............."
echo "$ALLPACKAGES"
sudo dpkg -i ./*.deb
echo "......................................!!!!!!!!!!!!..............."
echo "Press Enter to exit installation ..............."
read AA
exit 0
EOF


### makeself this into a bundle

makeself $PWD/$FULLFILENAME $FULLFILENAME.`arch`.OneClickInstall "Installing $FULLFILENAME ..........." ./install.sh

exit 0
